/**
 * 进程间通信(`IPC`)方式：
 * 1.管道
 * 2.消息队列
 * 3.共享内存
 * 4.信号量
 * 5.Socket
 * 
 * 管道：
 * `|` 管道符用法
 * 上一条命令的输出，作为下一条命令参数
 * 方式：command1 | command2
 * 
 * `netstat -tulnp | grep 8080`
 * 在这里就是把 `netstat -tulnp` 的输出结果作为 `grep 8080` 这条命令的输入
 * 如果两个进程要进行通信的话，就可以用`管道`来进行通信，并且这条`竖线`是没有
 * 名字的，所以我们把这种通信方式称为`匿名管道`
 * 
 * 命名管道:
 * 创建一个命名管道 `mkfifo test`
 * 用一个进程向`test`管道写数据 `echo "this is a pipe" > test`
 * 这个时候管道的内容没有被读出的话，那么这个命令就会一只停留在这里，只有当另一
 * 个进程把test里面的内容读出来的时候这个命令才会结束
 * 启动另一个进程读取 `cat < test`
 * 
 * 管道的通信机制类似于`缓存`
 * 管道的原理：管道实为内核使用环形队列机制，借助内核缓冲区(4k)实现。因为管道传递
 * 数据的单向性，管道又称为半双工管道。管道的这一特点决定了其使用的局限性。
 * 
 * 管道的实质：
 * (1) 其本质是一个伪文件(实为内核缓冲区)
 * (2) 由两个文件描述符引用，一个表示读端，一个表示写端
 * (3) 规定数据从管道的写端流入管道，从读端流出
 * 
 * 匿名管道的特性
 * (1) 只能进行单向通信
 * (2) 只适用于有血缘关系之间的进程
 * (3) 自带同步机制
 * (4) 在进行通信时面向字节流服务
 * (5) 生命进程随周期
 * 
 * 管道的局限性：
 * (1) 数据自己读不能自己写
 * (2) 数据一旦被读走，便不再管道中存在，不可反复读取
 * (3) 由于管道采用半双工通信方式，因此，数据只能在一个方向上流动
 * (4) 只能在有公共祖先的进程间使用管道
 * 
 * 常见的通信方式有: 单工通信、半双工通信、全双工通信
 * 
 * 命名管道(FIFO):
 * FIFO 不同于管道之处在于它提供了一个路径名与之关联，以FIFO的文件形式存储于文件系统中。
 * 命名管道是一个设备文件，因此，即使进程与创建FIFO的进程不存在亲缘关系，只要可以访问该
 * 路径，就能够通过FIFO相互通信。
 * FIFO(first input first output)总是按照先进先出的原则工作，第一个被写入的数据将首先
 * 从管道中读出
 * 
 * 命名管道是通过网络来完成进程之间的通信的，命名管道依赖于底层网络接口，其中包括有DNS服务、
 * TCP/IP 协议等机制，但是其屏蔽了底层的网络协议细节
 * 
 * Linux 下有两种方法创建命名管道。一是在Shell下交互地建立一个命名管道，一是在程序中使用系
 * 统函数建立命名管道。
 * Shell方式下可以使用 `mknod` 和 `mkfifo` 命令
 * 
 * 消息队列：
 * 消息队列是消息的链表，存放在内核中并由消息队列标识符表示
 * 
 * 特点:
 * `声明周期随内核，消息队列会一直存在，需要我们显示的调用接口(删除或使用)`
 * `消息队列可以双向通行`
 * `克服了管道只能承载无格式字节流的缺点`
 * 
 * 缺点：
 * `每个消息的最大长度是有上限的(MSGMAX)`
 * `cat /proc/sys/kernel/msgmax
 * `发送的数据很大，意味发送消息(拷贝)这个过程需要花费很多时间`
 * 
 * 共享内存：
 * 解决`拷贝`所消耗的时间
 * 
 * 由多个进程的虚拟内存空间共同地映射到同一段物理内存空间，来实现内存的共享
 * 
 * 缺点：
 * 进程竞争
 * 
 * 信号量:
 * 
 * 信号量本质就是一个`计数器`,用了实现进程之间的互斥与同步
 * 例如：信号量的初始值是1，然后a进程来访问`内存1`的时候，我们就把信号量的值设为0，然后进程b
 * 也要来访问`内存1`的时候，看到信号量的值为0就知道已经有进程在访问`内存1`了，这个时候进程b就
 * 会访问不了`内存1`
 */